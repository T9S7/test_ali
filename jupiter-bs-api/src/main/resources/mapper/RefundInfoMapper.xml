<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.armsmart.jupiter.bs.api.dao.RefundInfoMapper">

	<resultMap id="baseResultMap" type="com.armsmart.jupiter.bs.api.entity.RefundInfo">
        <result property="id" jdbcType="INTEGER" column="id"/>
        <result property="orderId" jdbcType="VARCHAR" column="order_id"/>
        <result property="userId" jdbcType="INTEGER" column="user_id"/>
		<result property="payMatch" jdbcType="INTEGER" column="pay_match"/>
        <result property="amount" jdbcType="BIGINT" column="amount"/>
        <result property="orderStatus" jdbcType="INTEGER" column="order_status"/>
        <result property="createTime" jdbcType="BIGINT" column="create_time"/>
        <result property="updateTime" jdbcType="BIGINT" column="update_time"/>
        <result property="isDel" jdbcType="BIT" column="is_del"/>
	</resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="columns">
	    <![CDATA[
		id,order_id,user_id,pay_match,amount,order_status,create_time,update_time,is_del
	    ]]>
	</sql>
	<!-- 插入数据 -->
	<insert id="insert" parameterType="com.armsmart.jupiter.bs.api.entity.RefundInfo" useGeneratedKeys="true" keyProperty="id">
		insert into refund_info
		(order_id,user_id,pay_match,amount,order_status,create_time,update_time,is_del)
		values (
		#{orderId,jdbcType=VARCHAR},
		#{userId,jdbcType=INTEGER},
		#{payMatch,jdbcType=INTEGER},
		#{amount,jdbcType=BIGINT},
		#{orderStatus,jdbcType=INTEGER},
		#{createTime,jdbcType=BIGINT},
		#{updateTime,jdbcType=BIGINT},
		#{isDel,jdbcType=BIT}
		)
	</insert>
	<!-- 更新数据 包含null-->
	<update id="update" parameterType="com.armsmart.jupiter.bs.api.entity.RefundInfo" >
		update refund_info
		<set>
			order_id = #{orderId,jdbcType=VARCHAR},
			user_id = #{userId,jdbcType=INTEGER},
			amount = #{amount,jdbcType=BIGINT},
			order_status = #{orderStatus,jdbcType=INTEGER},
			create_time = #{createTime,jdbcType=BIGINT},
			update_time = #{updateTime,jdbcType=BIGINT},
			is_del = #{isDel,jdbcType=BIT}
		</set>
		WHERE id = #{id}
	</update>
	<!-- 更新数据，不包含null -->
	<update id="updateSelective" parameterType="com.armsmart.jupiter.bs.api.entity.RefundInfo" >
		update refund_info
		<set>
			<if test="orderId != null">
				order_id = #{orderId,jdbcType=VARCHAR},
			</if>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="amount != null">
				amount = #{amount,jdbcType=BIGINT},
			</if>
			<if test="orderStatus != null">
				order_status = #{orderStatus,jdbcType=INTEGER},
			</if>
			<if test="createTime != null">
				create_time = #{createTime,jdbcType=BIGINT},
			</if>
			<if test="updateTime != null">
				update_time = #{updateTime,jdbcType=BIGINT},
			</if>
			<if test="isDel != null">
				is_del = #{isDel,jdbcType=BIT}
			</if>
		</set>
		WHERE id = #{id}
	</update>

	<!-- 主键条件查询 -->
	<select id="selectById" resultMap="baseResultMap">
		select
		<include refid="columns"/>
		from refund_info
		WHERE id = #{id}
	</select>

	<!-- 订单编号条件查询 -->
	<select id="selectByOrderId" resultMap="baseResultMap">
		select
		<include refid="columns"/>
		from refund_info
		WHERE order_id = #{orderId}
	</select>


	<select id="selectCountVsp" resultType="java.lang.Long">
		select count(amount)  FROM `refund_info`
		WHERE pay_match in
		<foreach collection="payMatchs" index="index" item="item" open="(" separator="," close=")">#{item}
		</foreach>
		and order_status= 0
		and is_del= 0
	</select>
	<!-- 列表条件查询count -->
	<select id="selectList_COUNT" resultType="java.lang.Long">
		select count(*)
		from refund_info
		<include refid="whereSql"/>
	</select>

	<!-- 列表条件查询 -->
	<select id="selectList" resultMap="baseResultMap">
		select
		<include refid="columns"/>
		from refund_info
		<include refid="whereSql"/>
		<include refid="orderSql"/>
	</select>
    
    <sql id="whereSql">
		<where>
			<if test="id != null">
				and id = #{id}
			</if>
			<if test="orderId != null">
				and order_id = #{orderId}
			</if>
			<if test="userId != null">
				and user_id = #{userId}
			</if>
			<if test="amount != null">
				and amount = #{amount}
			</if>
			<if test="orderStatus != null">
				and order_status = #{orderStatus}
			</if>
			<if test="createTime != null">
				and create_time = #{createTime}
			</if>
			<if test="updateTime != null">
				and update_time = #{updateTime}
			</if>
			<if test="isDel != null">
				and is_del = #{isDel}
			</if>
		</where>
	</sql>
    <sql id="orderSql">
    	<choose>
			<when test="orderBy != null and orderBy != ''">
				order by 
		    	<if test="orderBy == 'id'">
				id ${orderSort}
				</if>
		    	<if test="orderBy == 'orderId'">
				order_id ${orderSort}
				</if>
		    	<if test="orderBy == 'userId'">
				user_id ${orderSort}
				</if>
		    	<if test="orderBy == 'amount'">
				amount ${orderSort}
				</if>
		    	<if test="orderBy == 'orderStatus'">
				order_status ${orderSort}
				</if>
		    	<if test="orderBy == 'createTime'">
				create_time ${orderSort}
				</if>
		    	<if test="orderBy == 'updateTime'">
				update_time ${orderSort}
				</if>
		    	<if test="orderBy == 'isDel'">
				is_del ${orderSort}
				</if>
			</when>
			<otherwise>
				order by create_time desc
			</otherwise>
		</choose>
    </sql>
</mapper>

