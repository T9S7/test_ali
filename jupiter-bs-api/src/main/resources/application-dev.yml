server:
  port: 9999
  tomcat:
    connection-timeout: 2M
spring:
  datasource:
    url: jdbc:mysql://192.168.0.236:3306/jupiter?useUnicode=true&characterEncoding=utf-8&serverTimezone=Asia/Shanghai
    username: root
    password: Aszz2021!
    druid:
      initial-size: 5 #连接池初始化大小
      min-idle: 10 #最小空闲连接数
      max-active: 20 #最大连接数
      web-stat-filter:
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*" #不统计这些请求数据
      stat-view-servlet: #访问监控网页的登录用户名和密码
        login-username: druid
        login-password: druid
  redis:
    host: 121.40.254.174
    port: 6379
    password: aszz2021
    database: 10
    lettuce:
      pool:
        max-active: 8
        min-idle: 0
        max-idle: 8
        max-wait: 5S

kafka:
  bootstrap-servers: 172.16.130.83:9092,172.16.130.82:9092,172.16.130.84:9092
#  //172.16.130.83:9092,172.16.130.82:9092,172.16.130.84:9092
  producer:
    retries: 0  #发生错误后，消息重发的次数
    batch-size:  16384  #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
    buffer-memory: 33554432 # 设置生产者内存缓冲区的大小。
    key-serializer: org.apache.kafka.common.serialization.StringSerializer # 键的序列化方式
    value-serializer: org.apache.kafka.common.serialization.StringSerializer # 值的序列化方式
    # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
    # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
    # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
    acks: 1
    properties:
      request:
        timeout:
          ms: 5000
      max:
        block:
          ms: 5000
  consumer:
    auto-commit-interval: 1s  # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
    # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
    # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
    # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
    auto-offset-reset: earliest
    enable-auto-commit: false # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
    key-deserializer: org.apache.kafka.common.serialization.StringDeserializer   # 键的反序列化方式
    value-deserializer: org.apache.kafka.common.serialization.StringDeserializer   # 值的反序列化方式
  listener:
    concurrency: 5 # 在侦听器容器中运行的线程数。#listner负责ack，每调用一次，就立即commit
    missing-topics-fatal: false
    ack-mode: manual_immediate
aliyun:
  oss:
    endpoint: oss-cn-hangzhou.aliyuncs.com # oss对外服务的访问域名
    internal-endpoint: oss-cn-hangzhou.aliyuncs.com
    access-key-id: LTAI4Fz66qrCHwdftTuqxJa1 # 访问身份验证中用到用户标识
    access-key-secret: ZHrriE7nZEXpuLChvoVNfBFqCEDkLU # 用户用于加密签名字符串和oss用来验证签名字符串的密钥
    duration-seconds: 900 #The Min/Max value of DurationSeconds is 900/3600
    region: cn-hangzhou
    role-arn: acs:ram::1997929024133669:role/ramosstest
    avatar-bucket-name: jupiter-avatar-bucket
  sms:
    endpoint: dysmsapi.aliyuncs.com # oss对外服务的访问域名
    access-key-id: LTAI4Fz66qrCHwdftTuqxJa1 # 访问身份验证中用到用户标识
    access-key-secret: ZHrriE7nZEXpuLChvoVNfBFqCEDkLU # 用户用于加密签名字符串和oss用来验证签名字符串的密钥
    region: cn-hangzhou
    sign-name: 安时智造
    register-template-code: SMS_152289963
    auth-template-code: SMS_151565054
    admin-register-template-code: SMS_215071400
    duration-time: 600 #in seconds
  mobile-verify:
    endpoint: dypnsapi.aliyuncs.com
    access-key-id: LTAI4Fz66qrCHwdftTuqxJa1
    access-key-secret: ZHrriE7nZEXpuLChvoVNfBFqCEDkLU
logging:
  level:
    root: info
    com.armsmart.jupiter.bs.dao: debug
  config: classpath:logback.xml
secure:
  ignored:
    urls: #安全路径白名单
    - /wxpay/callback
    - /swagger-ui.html
    - /swagger-resources/**
    - /doc.html
    - /swagger/**
    - /**/v2/api-docs
    - /**/*.js
    - /**/*.css
    - /**/*.png
    - /**/*.ico
    - /webjars/springfox-swagger-ui/**
    - /actuator/**
    - /druid/**
    - /sysUser/login
    - /sysUser/verifyCodeLogin
    - /sysUser/getAuthVerifyCode
    - /sysUser/add
    - /userAuth/mobileVerifyLogin
    - /userAuth/mobileLogin
    - /userAuth/verifyCodeLogin
    - /userAuth/register
    - /userAuth/verifyCode
    - /userAuth/getAuthVerifyCode
    - /userAuth/checkAuthVerifyCode
    - /userAuth/resetPwd
    - /goodInfo/selectPage
    - /goodInfo/selectById
    - /kafka/send
    - /kafka/sendMessage
    - /kafka/sendDeferredResult
    - /thingInfo/selectList
    - /thingInfo/selectById/*
    - /bidInfo/selectBySellId
    - /thingInfo/recommend/*
    - /thingInfo/getInfo
    - /appEth/nft/getArtInfo/*
    - /tlCallBack/**

block-chain:
  url: http://172.16.113.164:3000
  timeout: 120000
  topic:
    #鉴权主题
    auth: nft-auth
    #确认主题
    identify: nft-identify
    #交易主题
    transaction: transaction
    #区块链一般操作主题
    common: eth-common
    #鉴权结果主题
    auth-result: nft-auth-result
    #确认结果主题
    identify-result: nft-identify-result
    #交易结果主题
    transaction-result: transaction-result
    #区块链一般操作结果主题
    common-result: eth-common-result
    #主题消费分组
    platform-to-chain-group: all-consumer-group
    #全部结果主题
    all-result: ${block-chain.topic.auth-result},${block-chain.topic.identify-result},${block-chain.topic.transaction-result},${block-chain.topic.common-result},${block-chain.topic.demo-result}
    #测试topic
    demo: demo
    #测试返回topic
    demo-result: demo-result

wx-pay:
  app-id: wxd4d9b45930f09b1b
  mchId: 1613025148
  apiKey: HEFEIYIWUYIZHENGKEJIYOUXIANGONG1
  notifyUrl: https://ajz.e2prove.com/wxpay/callback

wx-minipay:
  appid: wxb011878b5bfaf44d
  appsecret: 0ca5de059fdaa4f1bdd4783423f65986


tl-pay:
  url: https://cloud.allinpay.com/gateway
  appid:  1469220498779484162
  secretKey: wht6zLZRaydIEe7a9v6DSRdUO6M8tcI8
  privateKeyPath: "E:\\tl_pfx\\1469220498779484162.pfx"
  tlPublicKey: "E:\\tl_pfx\\TLCert.cer"
  pwd:  484162
  tgAccount: 401108 #托管账户集id
  vspCusid: 5533610481667J9 #微信支付宝使用
  vspOrgid: 5533610481667JG
  vspCusidKj: 5533610481667GC #其他支付方式使用
  industryCode: 1914
  industryName: 交易市场
  consumerIp: 183.162.230.222
  callBackUrl:  https://ajz.e2prove.com/member/callBack
  sellerCashPlat: 0.1
  buyerCashPlat: 0.1





